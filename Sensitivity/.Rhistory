r=cbind(1,x,x^2,q)%*%par* (1/2)^dima
r=matrix(r,nrow = n)
res[,1]=r[,1]
for (i in (2:t0)) {
x=X[(1:((t-i+1)*n)),];a=A[(1:((t-i+1)*n)),];r=c(r[,-1])
m=lm(c(r)~cbind(x,x^2,a,a^2))
par=coef(m)
q=cbind(a,a^2);q[,(1:dima)]=0;q[,-(1:dima)]=2/3
r=cbind(1,x,x^2,q)%*%par*(1/2)^dima
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
TW1[z]=(mean(res)-v)^2
TW2[z]=crossprod(rowMeans(res)-vi)/n
TW3[z]=crossprod(colMeans(res)-vt)/t0
TW4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
X=x;A=a
r=do.call(rbind,data[[3]]);r=c(r)
r=r[(1:((t-1)*n))]
x=X[(n+1):(t*n),];xprev=X[(1:((t-1)*n)),]
a=A[(1:((t-1)*n)),]
x=cbind(x,x^2)
xprev=cbind(xprev,xprev^2)
x=x[,-1]
xprev=xprev[,-1]
D=cbind(1,-x*(1/2)^dima+xprev,a,-2/3* (1/2)^dima+a^2)
par=solve(t(D)%*%D)%*%t(D)%*%r
par=par[1]
TW1[z]=(par-v)^2
TW2[z]=crossprod(par-vi)/n
TW3[z]=crossprod(par-vt)/t0
TW4[z]=sum((par-vit)^2)/(n*t0)
}
TW1[TW1>100]=mean(TW1[TW1<100])
TW2[TW2>100]=mean(TW2[TW2<100])
TW3[TW3>100]=mean(TW3[TW3<100])
TW4[TW4>100]=mean(TW4[TW4<100])
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
r=do.call(rbind,data[[3]]);r=c(r)
r=matrix(r,nrow=n)
X=x;A=a;R=r
par=c()
w=1
for (h in 1:t0) {
ps=1
x=X[((h-1)*n+1): (h*n),]
a=A[((h-1)*n+1): (h*n),]
r=R[((h-1)*n+1): (h*n)]
for (l in 1:dima) {
m=lm(a[,l]~x)
sig=sd(m$residuals)
ps=ps*dtruncnorm(a[,l],a=-1,b=1,mean=fitted(m),sd=sig)
}
w=w*(1/2)^dima / ps
### trimming
# w[w>10]=10
par[h]=mean(w*r)
}
TW1[z]=(mean(par)-v)^2
TW2[z]=crossprod(mean(par)-vi)/n
TW3[z]=crossprod(par-vt)/t0
TW4[z]=sum((par-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
r=do.call(rbind,data[[3]]);r=c(r)
r=matrix(r,nrow=n)
X=x;A=a;R=r
par=c()
ws=1
pi=(1/2)^dima
for (h in 1:t0) {
ps=1
x=X[((h-1)*n+1): (h*n),]
a=A[((h-1)*n+1): (h*n),]
r=R[((h-1)*n+1): (h*n)]
for (l in 1:dima) {
m=lm(a[,l]~x)
sig=sd(m$residuals)
ps=ps*dtruncnorm(a[,l],a=-1,b=1,mean=fitted(m),sd=sig)
}
w=ws*pi/ps
### trimming
# w[w>10]=10
# w[w<0]=0
m=lm(w~x)
ws=fitted(m)
w=ws*pi/ps
w[w>10]=10
w[w<0]=0
par[h]=mean(w*r)
}
TW1[z]=(mean(par)-v)^2
TW2[z]=crossprod(mean(par)-vi)/n
TW3[z]=crossprod(par-vt)/t0
TW4[z]=sum((par-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
gam=0.98
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
X=x;A=a
r=do.call(rbind,data[[3]]);r=c(r)
r=r[(1:((t-1)*n))]
x=X[(n+1):(t*n),];xprev=X[(1:((t-1)*n)),]
a=A[(1:((t-1)*n)),]
x=cbind(x,x^2)
xprev=cbind(xprev,xprev^2)
## from here
qq=matrix(0,nrow = (t-1)*n,ncol = 2*dima)
qq[,-(1:dima)]=(1/2)^dima* 2/3
Dpi=cbind(x*(1/2)^dima,qq); D=cbind(xprev,a,a^2)
PP=t(D)%*%(D)-gam*t(D)%*%Dpi
beta=(1-gam)*solve(PP)%*%t(Dpi)%*%r
par=mean(D%*%beta*r)
TW1[z]=(par-v)^2
TW2[z]=crossprod(par-vi)/n
TW3[z]=crossprod(par-vt)/t0
TW4[z]=sum((par-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
r=do.call(rbind,data[[3]]);r=c(r)
r=matrix(r,nrow=n)
X=x;A=a;R=r
par=c();w=1;weights=matrix(NA,nrow = n, ncol = t)
for (h in 1:t) {
ps=1
x=X[((h-1)*n+1): (h*n),]
a=A[((h-1)*n+1): (h*n),]
for (l in 1:dima) {
m=lm(a[,l]~x)
sig=sd(m$residuals)
ps=ps*dtruncnorm(a[,l],a=-1,b=1,mean=fitted(m),sd=sig)
}
w=(1/2)^dima / ps
weights[,h]=w
}
## outcome learning
x=X;a=A
m=lm(c(r)~cbind(x,x^2,a,a^2))
par=coef(m)
q=cbind(a,a^2);q[,(1:dima)]=0;q[,-(1:dima)]=2/3
r0=cbind(1,x,x^2,q)%*%par* (1/2)^dima
res=matrix(nrow=n,ncol=t0)
r=r0+c(weights)*(c(r)-fitted(m))
r=matrix(r,nrow = n)
res[,1]=r[,1]
w=weights
for (i in (2:t0)) {
weights=weights[,-ncol(weights)]
w=w[,-1]*weights
x=X[(1:((t-i+1)*n)),];a=A[(1:((t-i+1)*n)),];r=c(r[,-1])
m=lm(c(r)~cbind(x,x^2,a,a^2))
par=coef(m)
q=cbind(a,a^2);q[,(1:dima)]=0;q[,-(1:dima)]=2/3
r0=cbind(1,x,x^2,q)%*%par*(1/2)^dima
r=r0+c(w)*(r-fitted(m))
# clipping
r[r>10*max(R)]=max(R)
r[r<0.1*min(R)]=min(R)
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
TW1[z]=(mean(res)-v)^2
TW2[z]=crossprod(rowMeans(res)-vi)/n
TW3[z]=crossprod(colMeans(res)-vt)/t0
TW4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
r=do.call(rbind,data[[3]]);r=c(r)
X=x;A=a;R=r
par=c()
ws=1
pi=(1/2)^dima
par=c()
weights=matrix(NA,nrow = n, ncol = t)
wsmatrix=matrix(NA,nrow = n, ncol = t)
w=1
for (h in 1:t) {
ps=1
x=X[((h-1)*n+1): (h*n),]
a=A[((h-1)*n+1): (h*n),]
for (l in 1:dima) {
m=lm(a[,l]~x)
sig=sd(m$residuals)
ps=ps*dtruncnorm(a[,l],a=-1,b=1,mean=fitted(m),sd=sig)
}
w=pi/ps
weights[,h]=w
m=lm(w~x)
wsmatrix[,h]=fitted(m)
}
## trimming
weights[weights>10]=10
wsmatrix[wsmatrix>10]=10
wsmatrix[wsmatrix<0]=0
omega=weights*wsmatrix
omega[omega>10]=10
## outcome learning
x=X;a=A
m=lm(c(r)~cbind(x,x^2,a,a^2))
par=coef(m)
q=cbind(a,a^2);q[,(1:dima)]=0;q[,-(1:dima)]=2/3
res=matrix(nrow=n,ncol=t0)
r0=cbind(1,x,x^2,q)%*%par* (1/2)^dima
res=matrix(nrow=n,ncol=t0)
r=c(r0)+c(omega)*(c(r)-fitted(m))
## clipping
r[r>10*max(R)]=max(R)
r[r<0.1*min(R)]=min(R)
r=matrix(r,nrow = n)
res[,1]=r[,1]
for (i in (2:t0)) {
x=X[(1:((t-i+1)*n)),];a=A[(1:((t-i+1)*n)),];r=c(r[,-1])
wsmatrix=wsmatrix[,-ncol(wsmatrix)]
weights=weights[,-1]
m=lm(c(wsmatrix*weights)~x)
wsmatrix=matrix(fitted(m),nrow = n)
wsmatrix[wsmatrix>10]=10
m=lm(c(r)~cbind(x,x^2,a,a^2))
par=coef(m)
q=cbind(a,a^2);q[,(1:dima)]=0;q[,-(1:dima)]=2/3
r0=cbind(1,x,x^2,q)%*%par*(1/2)^dima
omega=wsmatrix*weights
omega[omega>10]=10
r=c(r0)+c(omega)*(r-fitted(m))
## clipping
r[r>10*max(R)]=max(R)
r[r<0.1*min(R)]=min(R)
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
TW1[z]=(mean(res)-v)^2
TW2[z]=crossprod(rowMeans(res)-vi)/n
TW3[z]=crossprod(colMeans(res)-vt)/t0
TW4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
library(truncnorm)
task=c('medium', 'noisy','mixed','medium_expert')
for (name in task) {
TW1=TW2=TW3=TW4=c()
for (z in 1:20) {
load(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/hopper/",name,z,'.RData',sep = ''))
n=20;t=20;t0=5
MC <- read.csv(paste("~/Desktop/JASA_Sims/D4RL/D4RL_Data/D4RL_MC/hopper/hopper_",name,'_MC.csv',sep = ''))
MC=MC$reward/500
vit=matrix(MC,nrow = 40)
vit=vit[1:n,]
vi=rowMeans(vit)
vt=colMeans(vit)[(1:t0)]
v=mean(vit)
vit=vit[,(1:t0)]
gam=0.9
dima=dim(data[[2]][[1]])[1]
dimx=dim(data[[1]][[1]])[1]
a=do.call(rbind,data[[2]]);a=c(a)
a=matrix(a,  nrow = dima); a=t(a)
x=do.call(rbind,data[[1]]);x=c(x)
x=matrix(x,  nrow = dimx); x=t(x)
X=x;A=a
r=do.call(rbind,data[[3]]);r=c(r)
r=r[(1:((t-1)*n))]
x=X[(n+1):(t*n),];xprev=X[(1:((t-1)*n)),]
a=A[(1:((t-1)*n)),]
x=cbind(x,x^2)
xprev=cbind(xprev,xprev^2)
qq=matrix(0,nrow = (t-1)*n,ncol = 2*dima)
qq[,-(1:dima)]=(1/2)^dima* 2/3
Dpi=cbind(x*(1/2)^dima,qq); D=cbind(xprev,a,a^2)
PP=t(D)%*%(D)-gam*t(D)%*%Dpi
beta=(1-gam)*solve(PP)%*%t(Dpi)%*%r
omega=D%*%beta
omega=omega[1:(n*(t-1))]
## Q-function
x=x[,-1]
xprev=xprev[,-1]
D=cbind(1,-x*(1/2)^dima+xprev,a,-2/3* (1/2)^dima+a^2)
par=solve(t(D)%*%D)%*%t(D)%*%r
beta=par[-1]
par=mean(omega*(r+D[,-1]%*%beta))
TW1[z]=(par-v)^2
TW2[z]=crossprod(par-vi)/n
TW3[z]=crossprod(par-vt)/t0
TW4[z]=sum((par-vit)^2)/(n*t0)
}
print(paste('hopper-', name,sep=''))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
setwd("~/Desktop/JASA_Sims/Sensitivity")
setwd("~/Desktop/JASA_Sims/Sensitivity")
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
TW1=TW2=TW3=TW4=c()
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
## backward induction
X=do.call(cbind,data[[1]]);R=do.call(cbind,data[[2]])
pi1=.8;pi0=1-pi1
A=do.call(cbind,data[[3]])
x=c(X);r=c(R);a=c(A)
H=I=diag(n)
for (k in 1:(t-1)) {
H=rbind(H,I)
}
G=L=matrix(0,nrow = n,ncol = t);G[,1]=1
for (k in 2:(t)) {
M=L
M[,k]=1
G=rbind(G,M)
}
H=H[,-1];G=G[,-1];D=cbind(H,G)
m=lm(r~cbind(x,x^2,a,D))
par=coef(m)
Q1=cbind(1,x,x^2,1,D)%*%par
Q0=cbind(1,x,x^2,0,D)%*%par
res=matrix(nrow=n,ncol=t0)
r=pi1*Q1+pi0*Q0
r=matrix(r,nrow = n)
res[,1]=r[,1]
for (i in (2:t0)) {
x=c(X[,1:(t-i+1)]);a=c(A[,1:(t-i+1)]);r=c(r[,-1])
H=I=diag(n)
for (k in 1:(t-i)) {
if (i==t){
break
}
H=rbind(H,I)
}
G=L=matrix(0,nrow = n,ncol = t-i+1);G[,1]=1
for (k in 2:(t-i+1)) {
if (i==t){
break
}
M=L
M[,k]=1
G=rbind(G,M)
}
H=H[,-1];G=G[,-1]
D=cbind(H,G)
if (i==t0) {
D=H
}
m=lm(r~cbind(x,x^2,a,D))
par=coef(m)
par[is.na(par)]=0
Q1=cbind(1,x,x^2,1,D)%*%par
Q0=cbind(1,x,x^2,0,D)%*%par
r=pi1*Q1+pi0*Q0
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
TW1[z]=(mean(res)-v)^2
TW2[z]=crossprod(rowMeans(res)-vi)/n
TW3[z]=crossprod(colMeans(res)-vt)/t0
TW4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
