mb2[z]=crossprod(rowMeans(res)-vi)/n
mb3[z]=crossprod(colMeans(res)-vt)/t0
mb4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(mb1),mean(mb2),mean(mb3),mean(mb4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
t0=5
sis1=sis2=sis3=sis4=c()
pi1=0.8
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]); A=do.call(c,data[[3]])
par=c()
w=1
for (h in 1:t0) {
pi=rep(pi1,t)
x=X[((h-1)*n+1): (h*n)]
a=A[((h-1)*n+1): (h*n)]
m=glm(a~x,binomial )
r=R[((h-1)*n+1): (h*n)]
ps=fitted(m)
ps[a==0]=1-ps[a==0]
pi[a==0]=1-pi[a==0]
w=w*pi/ps
w[w>10]=10
par[h]=mean(w*r)
}
sis1[z]=(mean(par)-v)^2
sis2[z]=crossprod(mean(par)-vi)/n
sis3[z]=crossprod(par-vt)/t0
sis4[z]=crossprod(par-c(vit))/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(sis1),mean(sis2),mean(sis3),mean(sis4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
t0=5
mis1=mis2=mis3=mis4=c()
pi1=0.8
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]); A=do.call(c,data[[3]])
par=c()
ws=1
for (h in 1:t0) {
pi=rep(pi1,t)
x=X[((h-1)*n+1): (h*n)]
a=A[((h-1)*n+1): (h*n)]
m=glm(a~x,binomial)
r=R[((h-1)*n+1): (h*n)]
ps=fitted(m)
ps[a==0]=1-ps[a==0]
pi[a==0]=1-pi[a==0]
w=ws*pi/ps
m=lm(w~x)
ws=fitted(m)
w=ws*pi/ps
w[w>=10]=10
par[h]=mean(w*r)
}
mis1[z]=(mean(par)-v)^2
mis2[z]=crossprod(mean(par)-vi)/n
mis3[z]=crossprod(par-vt)/t0
mis4[z]=crossprod(par-c(vit))/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(mis1),mean(mis2),mean(mis3),mean(mis4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
t0=5
mmw1=mmw2=mmw3=mmw4=c()
gam=.9
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]);r=R[(1:((t-1)*n))]
x=X[(n+1):(t*n)];xprev=X[(1:((t-1)*n))]
pi1=.8;pi0=1-pi1
a0=do.call(c,data[[3]]);aprev=a0[(1:((t-1)*n))];a=a0[(n+1):(t*n)]
x=cbind(a,x,x^2)
xprev=cbind(aprev,xprev,xprev^2)
D=(pi1*a+pi0*(1-a))*x
Dprev=(pi1*a+pi0*(1-a))*xprev
PP=t(xprev)%*%(xprev)-gam*t(xprev)%*%D
beta=(1-gam)*solve(PP)%*%t(Dprev)%*%r
par=mean(cbind(a0,X,X^2)%*%beta*R)
mmw1[z]=(par-v)^2
mmw2[z]=crossprod(par-vi)/n
mmw3[z]=crossprod(par-vt)/t0
mmw4[z]=crossprod(par-c(vit))/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(mmw1),mean(mmw2),mean(mmw3),mean(mmw4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
ndr1=ndr2=ndr3=ndr4=c()
pi1=.8;pi0=1-pi1
for (z in 1:200) {
set.seed(z)
## learning the ratio
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]); A=do.call(c,data[[3]])
par=c()
weights=matrix(NA,nrow = n, ncol = t)
w=1
for (h in 1:t) {
pi=rep(pi1,t)
x=X[((h-1)*n+1): (h*n)]
a=A[((h-1)*n+1): (h*n)]
m=glm(a~x,binomial)
r=R[((h-1)*n+1): (h*n)]
ps=fitted(m)
ps[a==0]=1-ps[a==0]
pi[a==0]=1-pi[a==0]
w=pi/ps
weights[,h]=w
}
## outcome learning
X=do.call(cbind,data[[1]]);R=do.call(cbind,data[[2]])
A=do.call(cbind,data[[3]])
x=c(X);r0=c(R);a=c(A)
m=lm(r0~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
res=matrix(nrow=n,ncol=t0)
r=pi1*Q1+pi0*Q0+c(weights)*(r0-fitted(m))
r=matrix(r,nrow = n)
res[,1]=r[,1]
w=weights
for (i in (2:t0)) {
weights=weights[,-ncol(weights)]
w=w[,-1]*weights
x=c(X[,1:(t-i+1)]);a=c(A[,1:(t-i+1)]);r=c(r[,-1])
m=lm(r~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
r=pi1*Q1+pi0*Q0+c(w)*(r-fitted(m))
## trimming
r[r>=max(R)]=max(R)
r[r<=min(R)]=min(R)
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
ndr1[z]=(mean(res)-v)^2
ndr2[z]=crossprod(mean(res)-vi)/n
ndr3[z]=crossprod(colMeans(res)-vt)/t0
ndr4[z]=sum((colMeans(res)-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(ndr1),
mean(ndr2),
mean(ndr3),
mean(ndr4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
tdr1=tdr2=tdr3=tdr4=c()
pi1=.8;pi0=1-pi1
for (z in 1:200) {
set.seed(z)
## learning the ratio
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]); A=do.call(c,data[[3]])
par=c()
weights=matrix(NA,nrow = n, ncol = t)
wsmatrix=matrix(NA,nrow = n, ncol = t)
for (h in 1:t) {
pi=rep(pi1,t)
x=X[((h-1)*n+1): (h*n)]
a=A[((h-1)*n+1): (h*n)]
m=glm(a~x,binomial)
ps=fitted(m)
ps[a==0]=1-ps[a==0]
pi[a==0]=1-pi[a==0]
w=pi/ps
weights[,h]=w
m=lm(w~x)
ws=fitted(m)
wsmatrix[,h]=ws
}
## outcome learning
X=do.call(cbind,data[[1]]);R=do.call(cbind,data[[2]])
A=do.call(cbind,data[[3]])
x=c(X);r0=c(R);a=c(A)
m=lm(r0~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
res=matrix(nrow=n,ncol=t0)
r=pi1*Q1+pi0*Q0+c(weights*wsmatrix)*(r0-fitted(m))
r=matrix(r,nrow = n)
res[,1]=r[,1]
for (i in (2:t0)) {
r=c(r[,-1]);x=c(X[,(i:t)])
wsmatrix=wsmatrix[,-ncol(wsmatrix)]
weights=weights[,-1]
m=lm(c(wsmatrix*weights)~x)
wsmatrix=matrix(fitted(m),nrow = n)
a=c(A[,1:(t-i+1)])
x=c(X[,1:(t-i+1)])
m=lm(r~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
r=pi1*Q1+pi0*Q0+c(wsmatrix*weights)*(r-fitted(m))
r[r>=max(R)]=max(R)
r[r<min(R)]=min(R)
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
t0=5
tdr1[z]=(mean(res)-v)^2
tdr2[z]=crossprod(mean(res)-vi)/n
tdr3[z]=crossprod(colMeans(res)-vt)/t0
tdr4[z]=sum((colMeans(res)-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(tdr1),mean(tdr2),mean(tdr3),mean(tdr4)),2))
}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
t0=5
drl1=drl2=drl3=drl4=c()
gam=.9
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
## weight learning
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]);r=R[(1:((t-1)*n))]
x=X[(n+1):(t*n)];xprev=X[(1:((t-1)*n))]
pi1=.8;pi0=1-pi1
a0=do.call(c,data[[3]]);aprev=a0[(1:((t-1)*n))];a=a0[(n+1):(t*n)]
x=cbind(a,x,x^2)
xprev=cbind(aprev,xprev,xprev^2)
D=(pi1*a+pi0*(1-a))*x
Dprev=(pi1*a+pi0*(1-a))*xprev
PP=t(xprev)%*%(xprev)-gam*t(xprev)%*%D
beta=(1-gam)*solve(PP)%*%t(Dprev)%*%r
omega=cbind(a0,X,X^2)%*%beta
omega=omega[1:(n*(t-1))]
## Q-function
X=do.call(c,data[[1]]);r=do.call(c,data[[2]]);r=r[(1:((t-1)*n))]
x=X[(n+1):(t*n)];xprev=X[(1:((t-1)*n))]
pi1=.8;pi0=1-pi1
a0=do.call(c,data[[3]]);a=a0[(1:((t-1)*n))]
a0=a0[(n+1):(t*n)]
x=cbind(x,x^2)
xprev=cbind(xprev,xprev^2)
x2=x[,-1]
xprev2=xprev[,-1]
D1=cbind(1,-pi1*x+a*xprev,-pi0*x2+(1-a)*xprev2)
D2=cbind(1,a*xprev,(1-a)*xprev2)
PP=t(D2)%*%D1
par=solve(PP)%*%t(D2)%*%r
beta=par[-1]
par=mean(omega*(r+D1[,-1]%*%beta))
drl1[z]=(par-v)^2
drl2[z]=crossprod(par-vi)/n
drl3[z]=crossprod(par-vt)/t0
drl4[z]=crossprod(par-c(vit))/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(drl1),mean(drl2),mean(drl3),mean(drl4)),2))}
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
TW1=TW2=TW3=TW4=c()
for (z in 1:200) {
set.seed(z)
data=mix_data(n,t)
## backward induction
X=do.call(cbind,data[[1]]);R=do.call(cbind,data[[2]])
pi1=.8;pi0=1-pi1
A=do.call(cbind,data[[3]])
x=c(X);r=c(R);a=c(A)
H=I=diag(n)
for (k in 1:(t-1)) {
H=rbind(H,I)
}
G=L=matrix(0,nrow = n,ncol = t);G[,1]=1
for (k in 2:(t)) {
M=L
M[,k]=1
G=rbind(G,M)
}
H=H[,-1];G=G[,-1];D=cbind(H,G)
m=lm(r~cbind(x,x^2,a,D))
par=coef(m)
Q1=cbind(1,x,x^2,1,D)%*%par
Q0=cbind(1,x,x^2,0,D)%*%par
res=matrix(nrow=n,ncol=t0)
r=pi1*Q1+pi0*Q0
r=matrix(r,nrow = n)
res[,1]=r[,1]
for (i in (2:t0)) {
x=c(X[,1:(t-i+1)]);a=c(A[,1:(t-i+1)]);r=c(r[,-1])
H=I=diag(n)
for (k in 1:(t-i)) {
if (i==t){
break
}
H=rbind(H,I)
}
G=L=matrix(0,nrow = n,ncol = t-i+1);G[,1]=1
for (k in 2:(t-i+1)) {
if (i==t){
break
}
M=L
M[,k]=1
G=rbind(G,M)
}
H=H[,-1];G=G[,-1]
D=cbind(H,G)
if (i==t0) {
D=H
}
m=lm(r~cbind(x,x^2,a,D))
par=coef(m)
par[is.na(par)]=0
Q1=cbind(1,x,x^2,1,D)%*%par
Q0=cbind(1,x,x^2,0,D)%*%par
r=pi1*Q1+pi0*Q0
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
TW1[z]=(mean(res)-v)^2
TW2[z]=crossprod(rowMeans(res)-vi)/n
TW3[z]=crossprod(colMeans(res)-vt)/t0
TW4[z]=sum((res-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(TW1),mean(TW2),mean(TW3),mean(TW4)),2))
}
setwd("~/Desktop/JASA_Sims/Mixture")
setwd("~/Desktop/JASA_Sims/Mixture")
source('dgp.R')
for (qq in 1:4) {
dgp(paste('Scenario', qq))
n=40;t=40;t0=5
set.seed(24)
value=matrix(0,nrow = n,ncol = t)
for (e in 1:400) {
v=target(n,t)
v=do.call(cbind,v)
value=value+v
}
vit=value[,(1:t0)]/400
vt=colMeans(value)[1:t0]/400
vi=rowMeans(value)/400
v=mean(value)/400
ndr1=ndr2=ndr3=ndr4=c()
pi1=.8;pi0=1-pi1
for (z in 1:200) {
set.seed(z)
## learning the ratio
data=mix_data(n,t)
X=do.call(c,data[[1]]);R=do.call(c,data[[2]]); A=do.call(c,data[[3]])
par=c()
weights=matrix(NA,nrow = n, ncol = t)
w=1
for (h in 1:t) {
pi=rep(pi1,t)
x=X[((h-1)*n+1): (h*n)]
a=A[((h-1)*n+1): (h*n)]
m=glm(a~x,binomial)
r=R[((h-1)*n+1): (h*n)]
ps=fitted(m)
ps[a==0]=1-ps[a==0]
pi[a==0]=1-pi[a==0]
w=pi/ps
weights[,h]=w
}
## outcome learning
X=do.call(cbind,data[[1]]);R=do.call(cbind,data[[2]])
A=do.call(cbind,data[[3]])
x=c(X);r0=c(R);a=c(A)
m=lm(r0~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
res=matrix(nrow=n,ncol=t0)
r=pi1*Q1+pi0*Q0+c(weights)*(r0-fitted(m))
r=matrix(r,nrow = n)
res[,1]=r[,1]
w=weights
for (i in (2:t0)) {
weights=weights[,-ncol(weights)]
w=w[,-1]*weights
x=c(X[,1:(t-i+1)]);a=c(A[,1:(t-i+1)]);r=c(r[,-1])
m=lm(r~cbind(x,x^2,a))
par=coef(m)
Q1=cbind(1,x,x^2,1)%*%par
Q0=cbind(1,x,x^2,0)%*%par
r=pi1*Q1+pi0*Q0+c(w)*(r-fitted(m))
## trimming
r[r>=max(R)]=max(R)
r[r<=min(R)]=min(R)
r=matrix(r,nrow = n)
res[,i]=r[,1]
}
ndr1[z]=(mean(res)-v)^2
ndr2[z]=crossprod(mean(res)-vi)/n
ndr3[z]=crossprod(colMeans(res)-vt)/t0
ndr4[z]=sum((colMeans(res)-vit)^2)/(n*t0)
}
print(paste('Scenario', qq))
print(round(c(mean(ndr1),
mean(ndr2),
mean(ndr3),
mean(ndr4)),2))
}
